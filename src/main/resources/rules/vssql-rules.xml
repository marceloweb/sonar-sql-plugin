<sql-rules>
	<rule>
		<key>Microsoft.Rules.Data.SR0001</key>
		<name>SR0001: Avoid SELECT * in stored procedures, views, and table-valued functions</name>
		<internalKey>SR0001</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>One or more of your stored procedures, views, or table-valued functions contains SELECT *.</p>
		<h2>Rule description</h2>
		<p>If you use a wildcard character in a stored procedure, view, or table-valued function to select all columns in a table or view, the number or shape of returned columns might change if the underlying table or view changes. The shape of a column is a combination of its type and size. This variance could cause problems in applications that consume the stored procedure, view, or table-valued function because those consumers will expect a different number of columns.</p>
		<h2>How to fix violations</h2>
		<p>You can protect consumers of the stored procedure, view, or table-valued function from schema changes by replacing the wildcard character with a fully qualified list of column names. You can easily expand the wildcard character by using refactoring.</p>
		<h2>When to Suppress Warnings</h2>
		<p>When you fix the issues that this rule identifies, you prevent future breaks in the applications that rely on your code. You should not suppress this warning.</p>
		<h2>Example</h2>
		<p>The following example first defines a table that is named [Table2] and then defines two stored procedures. The first procedure contains a SELECT *, which violates rule SR0001. The second procedure avoids SELECT * and explicitly lists the columns in the SELECT statement.</p>
		<pre><code>
CREATE TABLE [dbo].[Table2] 
( 
[ID] INT NOT NULL IDENTITY(0, 1), 
[c1] INT NOT NULL , 
[Comment] VARCHAR (50)
)
ON [PRIMARY]

CREATE PROCEDURE [dbo].[procWithWarning]
AS 
BEGIN
-- Contains code that breaks rule SR0001
SELECT * 
FROM [dbo].[Table2] 
END

CREATE PROCEDURE [dbo].[procFixed]
AS 
BEGIN
-- Explicitly lists the column names in a SELECT statement
SELECT [dbo].[Table2].[ID], [dbo].[Table2].[c1], [dbo].[Table2].[Comment]
FROM [dbo].[Table2] 
END
</code></pre>
		<a href="https://msdn.microsoft.com/en-us/library/dd193296(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd193296(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>design</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0008</key>
		<name>SR0008: Consider using SCOPE_IDENTITY instead of @@IDENTITY</name>
		<internalKey>SR0008</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>Your code contains an <strong>@@IDENTITY</strong> call.</p>
		<h2>Rule description</h2>
		<p>Because <strong>@@IDENTITY</strong> is a global identity value, it might have been updated outside the current scope and obtained an unexpected value. Triggers, including nested triggers used by replication, can update <strong>@@IDENTITY</strong> outside your current scope.</p>
		<h2>How to fix violations</h2>
		<p>To resolve this issue you must replace references to <strong>@@IDENTITY</strong> with <strong>SCOPE_IDENTITY</strong>, which returns the most recent identity value in the scope of the user statement.		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You might suppress this warning if the statement that uses <strong>@@IDENTITY</strong> is used when you are sure that no other processing might have updated the value of <strong>@@IDENTITY</strong>. However, we strongly recommend that you resolve the warning instead of suppressing it because <strong>SCOPE_IDENTITY</strong> provides the intended value without the risk of unexpected changes.</p>
		<h2>Example</h2>
		<p>
		In the first example, @@IDENTITY is used in a stored procedure that inserts data into a table. The table is then published for merge replication, which adds triggers to tables that are published. Therefore, @@IDENTITY can return the value from the insert operation into a replication system table instead of the insert operation into a user table.
</p><p>
The Sales.Customer table has a maximum identity value of 29483. If you insert a row into the table, @@IDENTITY and SCOPE_IDENTITY() return different values. SCOPE_IDENTITY() returns the value from the insert operation into the user table, but @@IDENTITY returns the value from the insert operation into the replication system table.
</p><p>The second example shows how you can use SCOPE_IDENTITY() to access the inserted identity value and resolve the warning.
		</p>
		<pre><code>CREATE PROCEDURE [dbo].[ProcedureWithWarning]
@param1 INT, 
@param2 NCHAR(1),
@Param3 INT OUTPUT
AS
BEGIN
INSERT INTO Sales.Customer ([TerritoryID],[CustomerType]) VALUES (@param1,@param2);

SELECT @Param3 = @@IDENTITY
END

CREATE PROCEDURE [dbo].[ProcedureFixed]
@param1 INT, 
@param2 NCHAR(1),
@param3 INT OUTPUT
AS
BEGIN
INSERT INTO Sales.Customer ([TerritoryID],[CustomerType]) VALUES (@param1,@param2);

SELECT @Param3 = SCOPE_IDENTITY()
END</code></pre>
		<a href="https://msdn.microsoft.com/en-us/library/dd172121(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd172121(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>design</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0009</key>
		<name>SR0009: Avoid using types of variable length that are size 1 or 2</name>
		<internalKey>SR0009</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>One or more data types of variable length have a length of 1 or 2.</p>
		<h2>Rule description</h2>
		<p>When you use data types of variable length such as VARCHAR, NVARCHAR, and VARBINARY, you incur an additional storage cost to track the length of the value stored in the data type. In addition, columns of variable length are stored after all columns of fixed length, which can have performance implications.
		</p>
		<h2>How to fix violations</h2>
		<p>If the length of the type will be very small (size 1 or 2) and consistent, declare them as a type of fixed length, such as CHAR, NCHAR, and BINARY.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You should not suppress this warning.
		</p>
		<h2>Example</h2>
		<p>This example shows definitions for two tables. The first table declares a string of variable length to have length 2. The second table declares a string of fixed length instead, which avoids the warning.
		</p>
		<pre><code>CREATE TABLE [dbo].[TableWithWarning]
( 
[ID] INT NOT NULL IDENTITY(0, 1), 
[c1] INT NOT NULL PRIMARY KEY, 
[c2] INT,
[c3] INT,
[SmallString] VARCHAR(2)
)
ON [PRIMARY]

CREATE TABLE [dbo].[FixedTable]
( 
[ID] INT NOT NULL IDENTITY(0, 1), 
[c1] INT NOT NULL PRIMARY KEY, 
[c2] INT,
[c3] INT,
[SmallString] CHAR(2)
)
ON [PRIMARY]</code></pre>
<p>Data for types of variable length is physically stored after data for types of fixed length. Therefore, you will cause data movement if you change a column from variable to fixed length in a table that is not empty.</p>
		<a href="https://msdn.microsoft.com/en-us/library/dd193263(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd193263(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>design</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0010</key>
		<name>SR0010: Avoid using deprecated syntax when you join tables or views</name>
		<internalKey>SR0010</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>
		One or more joins between tables and views are using deprecated syntax (such as =, *=, or =* in a WHERE clause) instead of current syntax.
		</p>
		<h2>Rule description</h2>
		<p>
		Joins that use the deprecated syntax fall into two categories:
<ul>
<li>Inner Join - For an inner join, the values in the columns that are being joined are compared by using a comparison operator such as =, <, >=, and so forth. Inner joins return rows only if at least one row from each table matches the join condition. 
</li><li>Outer Join- Outer joins return all rows from at least one of the tables or views specified in the FROM clause, as long as those rows meet any WHERE or HAVING search condition. If you use *= or =* to specify an outer join, you are using deprecated syntax. 
		</li></ul></p>
		<h2>How to fix violations</h2>
		<p>
		To fix a violation in an inner join, use the INNER JOIN syntax, as the example later in this topic shows.
		To fix a violation in an outer join, use the appropriate OUTER JOIN syntax, as the examples later in this topic show. You have the following options:
<ul><li>LEFT OUTER JOIN or LEFT JOIN</li>
<li>RIGHT OUTER JOIN or RIGHT JOIN</li></ul>
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You should not suppress this warning. You should fix all instances because the deprecated syntax might not work in future releases of SQL Server.
		</p>
		<h2>Example</h2>
		<p>
		The six examples demonstrate the following options:<br/>
    Example 1 demonstrates the deprecated syntax for an inner join.<br/>

    Example 2 demonstrates how you can update Example 1 to use current syntax.<br/>

    Example 3 demonstrates the deprecated syntax for a left outer join.<br/>

    Example 4 demonstrates how you can update Example 2 to use current syntax.<br/>

    Example 5 demonstrates the deprecated syntax for a right outer join.<br/>

    Example 6 demonstrates how you can update Example 5 to use current syntax.
		</p>
		<pre><code>-- Example 1: Deprecated syntax for an inner join
SELECT [T2].[c3], [T1].[c3] 
FROM [dbo].[Table2] T2, [dbo].[Table1] T1 
WHERE [T1].[ID] = [T2].[ID]

-- Example 2: Current syntax for an inner join
SELECT [T2].[c3], [T1].[c3] 
FROM [dbo].[Table2] AS T2
INNER JOIN [dbo].[Table1] as T1
ON [T2].[ID] = [T2].[ID]

-- Example 3: Deprecated syntax for a left outer join
SELECT [T2].[c3], [T1].[c3] 
FROM [dbo].[Table2] T2, [dbo].[Table1] T1 
WHERE [T1].[ID] *= [T2].[ID]

-- Example 4: Fixed syntax for a left outer join
SELECT [T2].[c3], [T1].[c3] 
FROM [dbo].[Table2] AS T2
LEFT OUTER JOIN [dbo].[Table1] as T1
ON [T2].[ID] = [T2].[ID]

-- Example 5: Deprecated syntax for a right outer join
SELECT [T2].[c3], [T1].[c3] 
FROM [dbo].[Table2] T2, [dbo].[Table1] T1 
WHERE [T1].[ID] =* [T2].[ID]

-- Example 6: Fixed syntax for a right outer join
SELECT [T2].[c3], [T1].[c3] 
FROM [dbo].[Table2] AS T2
RIGHT OUTER JOIN [dbo].[Table1] as T1
ON [T2].[ID] = [T2].[ID]</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd172122(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd172122(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>design</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0013</key>
		<name>SR0013: Output parameter (parameter) is not populated in all code paths</name>
		<internalKey>SR0013</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>Your output parameters are not initialized in all possible code paths throughout a stored procedure or function.</p>
		<h2>Rule description</h2>
		<p>This rule identifies code in which the output parameter is not set to a value in one or more code paths through the stored procedure or function. This rule does not identify in which paths the output parameter should be set. If multiple output parameters have this problem, one warning appears for each parameter.
		</p>
		<h2>How to fix violations</h2>
		<p>
		You can correct this issue in one of two ways. You can fix this issue most easily if you initialize the output parameters to a default value at the start of the procedure body. As an alternative, you can also set the output parameter to a value in the specific code paths in which the parameter is not set. However, you might overlook an uncommon code path in a complex procedure.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You should not suppress this warning. As a best practice, you should always set your output parameters to a value. If an indeterminate value is returned, unexpected results might adversely affect the code that calls the stored procedure or function.
		</p>
		<h2>Example</h2>
		<p>The following example shows two simple procedures. The first procedure does not set the value of the output parameter, @Sum. The second procedure initializes the @Sum parameter at the start of the procedure, which ensures that the value will be set in all code paths.
		</p>
		<pre><code>CREATE PROCEDURE [dbo].[procedureHasWarning]
(
@Value1 BIGINT,
@Value2 INT,
@Value3 INT,
@Sum INT OUTPUT 
) 
AS 
BEGIN
-- No initialization of the output parameter
--
-- Additional statements here.
--
RETURN 0;
END
--
CREATE PROCEDURE [dbo].[procedureFixed]
(
@Value1 BIGINT,
@Value2 INT,
@Value3 INT,
@Sum INT OUTPUT 
) 
AS 
BEGIN
-- Initialize the out parameter
SET @Sum = 0;
--
-- Additional statements here
--
RETURN 0;
END</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd172136(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd172136(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>design</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0014</key>
		<name>SR0014: Data loss might occur when casting from {Type1} to {Type2}</name>
		<internalKey>SR0014</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>The data type for a column, variable, or parameter is being converted implicitly to another data type.
		</p>
		<h2>Rule description</h2>
		<p>If data types are inconsistently assigned to columns, variables, or parameters, they are implicitly converted when the Transact-SQL code that contains those objects is run. This type of conversion not only reduces performance but also, in some cases, causes subtle loss of data. For example, a table scan might run if every column in a WHERE clause must be converted. Worse, data might be lost if a Unicode string is converted to an ASCII string that uses a different code page.
		</p>
		<h2>How to fix violations</h2>
		<p>You can avoid and resolve these issues by assigning data types consistently and by explicitly converting types where they are needed.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You should not suppress this warning.
		</p>
		<h2>Example</h2>
		<p>This example shows two stored procedures that insert data into a table. The first procedure, procWithWarning, will cause an implicit conversion of a data type. The second procedure, procFixed, shows how you can add an explicit conversion to maximize performance and retain all data.
		</p>
		<pre><code>CREATE TABLE [dbo].[Table2] 
( 
[ID] INT NOT NULL IDENTITY(0, 1), 
[c1] INT NOT NULL , 
[c2] INT NOT NULL , 
[c3] BIGINT NOT NULL , 
[Comment] VARCHAR (25)
)
ON [PRIMARY]

CREATE PROCEDURE [dbo].[procWithWarning]
(
@Value1 INT,
@Value2 INT,
@Value3 BIGINT,
@Comment CHAR(30)
) 
AS 
BEGIN
INSERT INTO [Table2] ([c1], [c2], [c3], Comment) 
VALUES (@Value1, @Value2, @Value3, @Comment) 

END

CREATE PROCEDURE [dbo].[procFixed]
(
@Value1 INT,
@Value2 INT,
@Value3 BIGINT,
@Comment CHAR(10)
) 
AS 
BEGIN
INSERT INTO [Table2] ([c1], [c2], [c3], Comment) 
VALUES (@Value1, @Value2, @Value3, CAST(@Comment AS VARCHAR(25))) 

END</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd193269(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd193269(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>design</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0011</key>
		<name>SR0011: Avoid using special characters in object names</name>
		<internalKey>SR0011</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>The name of at least one database object contains at least one special character.
		</p>
		<h2>Rule description</h2>
		<p>If you name a database object by using any character in the following table, you make it more difficult not only to reference that object but also to read code that contains the name of that object:
		</p>
		<table>
<tr><td>Character</td><td>Description</td></tr>
<tr><td></td><td>Whitespace character</td></tr>
<tr><td>[</td><td>Left square bracket</td></tr>
<tr><td>]</td><td>Right square bracket</td></tr>
<tr><td>]</td><td>Right square bracket</td></tr>
<tr><td>'</td><td>Single quotation mark</td></tr>
<tr><td>"</td><td>Double quotation mark</td></tr>
</table>

		<h2>How to fix violations</h2>
		<p>To resolve this issue, you must remove all special characters from the object name. If the object is referenced in other locations in your database project (such as in database unit tests), you should use database refactoring to update the references.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You might have to suppress these warnings if one or more other applications reference the database object and you cannot change the applications. 
		</p>
		<h2>Example</h2>
		<p>In the first example, a table contains a column that has a special character in its name. In the second example, the name does not contain a special character.
		</p>
		<pre><code>CREATE TABLE [dbo].[TableWithProblemColumn]
( 
[ID] INT NOT NULL IDENTITY(0, 1), 
[Small'String] VARCHAR(10)
)
ON [PRIMARY]

CREATE TABLE [dbo].[FixedTable]
( 
[ID] INT NOT NULL IDENTITY(0, 1), 
[SmallString] VARCHAR(10)
)
ON [PRIMARY]</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd172134(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd172134(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>naming</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0012</key>
		<name>SR0012: Avoid using reserved words for type names</name>
		<internalKey>SR0012</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>The name of a user-defined type includes a reserved word.
		</p>
		<h2>Rule description</h2>
		<p>You should avoid using a reserved word as the name of a user-defined type because readers will have a harder time understanding your database code. You can use reserved words in SQL Server as identifiers and object names only if you use delimited identifiers. 
		</p>
		<h2>How to fix violations</h2>
		<p>You must rename the user-defined type or object name. You can use database refactoring to easily replace all instances of the name throughout your database project.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You might need to suppress this warning if an external application that you cannot change references the name.
		</p>
		<h2>Example</h2>
		<p>The first example shows the definition for a user-defined type that will trigger this warning. The second example shows one way to correct the user-defined type and resolve the issue. 
		</p>
		<pre><code>-- Potential misuse of a keyword as a type name
CREATE TYPE Alter
FROM varchar(11) NOT NULL ;

-- Corrected type name
CREATE TYPE AlterType
FROM varchar(11) NOT NULL ;</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd193421(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd193421(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>naming</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0016</key>
		<name>SR0016: Avoid using sp_ as a prefix for stored procedures</name>
		<internalKey>SR0016</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>One or more of your stored procedures has sp_ as a prefix.
		</p>
		<h2>Rule description</h2>
		<p>In SQL Server, the sp_ prefix designates system stored procedures. If you use that prefix for your stored procedures, the name of your procedure might conflict with the name of a system stored procedure that will be created in the future. If such a conflict occurs, your application might break if your application refers to the procedure without qualifying the reference by schema. In this situation, the name will bind to the system procedure instead of to your procedure.
		</p>
		<h2>How to fix violations</h2>
		<p>To resolve this issue, you must replace sp_ with a different prefix to designate user stored procedures, or you must use no prefix at all. You should consider using database refactoring to update the name of any procedures that cause this warning. By using database refactoring, you can update not only the name of each procedure but also any references to that procedure throughout your database project.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You might suppress this warning if you cannot change applications that call your stored procedure.
		</p>
		<h2>Example</h2>
		<p>In the first example, the procedure name will cause this warning to be issued. In the second example, the procedure uses a usp_ prefix instead of sp_ and avoids the warning.
		</p>
		<pre><code>CREATE PROCEDURE [dbo].[sp_procWithWarning]
(
@Value1 INT,
) 
AS 
BEGIN
-- Additional statements here
RETURN 0;
END

CREATE PROCEDURE [dbo].[usp_procFixed]
(
@Value1 INT,
) 
AS 
BEGIN
-- Additional statements here
RETURN 0;
END</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd172115(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd172115(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>naming</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0004</key>
		<name>SR0004: Avoid using columns that do not have indexes as test expressions in IN predicates</name>
		<internalKey>SR0004</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>An IN predicate references a column that does not have an index.
		</p>
		<h2>Rule description</h2>
		<p>You cause a table scan if you use a WHERE clause that references one or more columns that are not indexed as part of an IN predicate. The table scan will reduce performance.
		</p>
		<h2>How to fix violations</h2>
		<p>
		To resolve this issue, you must make one of the following changes:
<ul><li>Change the IN predicate to reference only those columns that have an index.</li>
<li>Add an index to any column that the IN predicate references and that does not already have an index.</li></ul>
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You might suppress this warning if the table will never contain more than a few rows.
		</p>
		<h2>Example</h2>
		<p>In this example, a simple SELECT statement references a column, [c1], that did not have an index. The second statement defines an index that you can add to resolve this warning.
		</p>
		<pre><code>CREATE PROCEDURE [dbo].[Procedure3WithWarnings]
AS
SELECT [Comment] 
FROM [dbo].[Table2]  
WHERE [c1] IN (1, 2, 3)

CREATE INDEX [IX_Table2_C1]
ON [dbo].[Table2] (c1);</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd193249(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd193249(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>performance</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0005</key>
		<name>SR0005: Avoid using patterns that start with “%” in LIKE predicates</name>
		<internalKey>SR0005</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>The LIKE predicate of a WHERE clause starts with the wildcard character, "%".
		</p>
		<h2>Rule description</h2>
		<p>You could cause a table scan if you use a WHERE clause that contains a LIKE predicate such as '%pattern string' to search for text that can occur anywhere in a column.
		</p>
		<h2>How to fix violations</h2>
		<p>To resolve this issue, you should change the search string so that it starts with a character that is not a wildcard (%), or you should create a full-text index.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You might suppress this warning if you rarely use the statement that causes this warning or if the table never contains more than a few rows.
		</p>
		<h2>Example</h2>
		<p>In the first example, the SELECT statement will cause a table scan because the search string starts with a wildcard character. In the second example, the statement will cause an index seek because the search string does not start with a wildcard character. An index seek retrieves only the rows that match the WHERE clause. 
		</p>
		<pre><code>SELECT [dbo].[Table2].[ID], [dbo].[Table2].[c1], [dbo].[Table2].[c2], [dbo].[Table2].[c3], [dbo].[Table2].[Comment] 
FROM dbo.[Table2] 
WHERE Comment LIKE '%pples' 

SELECT [dbo].[Table2].[ID], [dbo].[Table2].[c1], [dbo].[Table2].[c2], [dbo].[Table2].[c3], [dbo].[Table2].[Comment] 
FROM dbo.[Table2] 
WHERE Comment LIKE 'A%' 
</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd193273(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd193273(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>performance</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0006</key>
		<name>SR0006: Move a column reference to one side of a comparison operator to use a column index</name>
		<internalKey>SR0006</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>As part of a comparison, an expression contains a column reference.
		</p>
		<h2>Rule description</h2>
		<p>Your code could cause a table scan if it compares an expression that contains a column reference. 
		</p>
		<h2>How to fix violations</h2>
		<p>To resolve this issue, you must rework the comparison so that the column reference appears alone on one side of the comparison operator, instead of inside an expression. When you run the code that has the column reference alone on one side of the comparison operator, SQL Server can use the column index, and no table scan is performed.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You might suppress this warning if the table whose column is being compared will never contain more than a few rows.
		</p>
		<h2>Example</h2>
		<p>In the first procedure, a WHERE clause includes column [c1] in an expression as part of a comparison. In the second procedure, the comparison results will be identical but never require a table scan.
		</p>
		<pre><code>CREATE PROCEDURE [dbo].[Procedure3WithWarnings]
@param1 int
AS
SELECT [c1], [c2], [c3], [Comment] 
FROM [dbo].[Table2]  
WHERE ([c1] + 5 > @param1)

CREATE PROCEDURE [dbo].[Procedure3Fixed]
@param1 int
AS
SELECT [c1], [c2], [c3], [Comment] 
FROM [dbo].[Table2]  
WHERE ([c1] > (@param1 - 5))</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd193264(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd193264(v=vs.100).aspx</a>
		]]></description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>performance</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>10min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0007</key>
		<name>SR0007: Use ISNULL(column, default_value) on nullable columns in expressions</name>
		<internalKey>SR0007</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>An ISNULL function was not used in a comparison expression where a column could contain a NULL value.
		</p>
		<h2>Rule description</h2>
		<p>If your code compares two NULL values or a NULL value with any other value, your code will return an unknown result.
		</p>
		<h2>How to fix violations</h2>
		<p>You should explicitly indicate how to handle NULL values in comparison expressions by wrapping each column that can contain a NULL value in an ISNULL function.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>Because the results of the comparison are indeterminate, you should not suppress this warning.
		</p>
		<h2>Example</h2>
		<p>This example shows a simple table definition and two stored procedures. The table contains a column, [c2], which can contain a NULL value. The first procedure, [ProcedureWithWarning], compares [c2] to a constant value. The second procedure fixes the issue by wrapping [c2] with a call to the ISNULL function.
		</p>
		<pre><code>CREATE TABLE [dbo].[Table1]
( 
[ID] INT NOT NULL IDENTITY(0, 1), 
[c1] INT NOT NULL PRIMARY KEY, 
[c2] INT
)
ON [PRIMARY] 

CREATE PROCEDURE [dbo].[ProcedureWithWarning]
AS
BEGIN
SELECT COUNT(*) FROM [dbo].[Table1]
 WHERE [c2] > 2;
END

CREATE PROCEDURE [dbo].[ProcedureFixed]
AS
BEGIN
SELECT COUNT(*) FROM [dbo].[Table1]
 WHERE ISNULL([c2],0) > 2;
END</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd193267(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd193267(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>performance</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
	<rule>
		<key>Microsoft.Rules.Data.SR0015</key>
		<name>SR0015: Extract deterministic function calls from WHERE predicates</name>
		<internalKey>SR0015</internalKey>
		<descriptionFormat>HTML</descriptionFormat>
		<description><![CDATA[
		<h2>Cause</h2>
		<p>A WHERE predicate contains one or more deterministic function calls.
		</p>
		<h2>Rule description</h2>
		<p>In a WHERE predicate, a function call is deterministic if its value does not depend on the selected data. Such calls could cause unnecessary table scans, which decrease database performance. 
		</p>
		<h2>How to fix violations</h2>
		<p>To resolve this issue, you can assign the result of the call to a variable that you use in the WHERE predicate.
		</p>
		<h2>When to Suppress Warnings</h2>
		<p>You might suppress this warning if the table or tables that the WHERE predicate references will never contain more than a few rows.
		</p>
		<h2>Example</h2>
		<p>In the first example, the stored procedure includes a deterministic function call, ABS(@param1), in the WHERE predicate. In the second example, a temporary variable holds the result of the call.
		</p>
		<pre><code>CREATE PROCEDURE [dbo].[Procedure2WithWarning]
@param1 INT = 0, 
AS
BEGIN
SELECT [c1], [c2], [c3], [SmallString] 
FROM [dbo].[Table1]
WHERE [c2] > ABS(@param1)
END

CREATE PROCEDURE [dbo].[Procedure2Fixed]
@param1 INT = 0, 
AS
BEGIN
DECLARE @AbsOfParam1 INT
SET @AbsOfParam1 = ABS(@param1)

SELECT [c1], [c2], [c3], [SmallString] 
FROM [dbo].[Table1]
WHERE [c2] > @AbsOfParam1
END</code></pre>
	<a href="https://msdn.microsoft.com/en-us/library/dd193285(v=vs.100).aspx">https://msdn.microsoft.com/en-us/library/dd193285(v=vs.100).aspx</a>
		]]></description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<tag>performance</tag>
		<remediationFunction>LINEAR</remediationFunction>
		<remediationFunctionBaseEffort></remediationFunctionBaseEffort>
		<debtRemediationFunctionCoefficient>5min</debtRemediationFunctionCoefficient>
	</rule>
</sql-rules>
